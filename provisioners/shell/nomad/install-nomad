#!/bin/bash
#
# Installs Nomad on AWS EC2.
#

set -e

# =============================================================================

readonly NOMAD_USER="nomad"
readonly NOMAD_INSTALL_PATH="/opt/nomad"

readonly SYSTEM_BIN_DIR="/usr/local/bin"

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_NAME="$(basename "$0")"

# =============================================================================

function print_usage {
  echo
  echo "Usage: install-nomad [OPTIONS]"
  echo
  echo "This script can be used to install Nomad on AWS EC2."
  echo
  echo "Options:"
  echo
  echo -e "  --version\tThe version of Nomad to install."
  echo
  echo "Example:"
  echo
  echo "  install-nomad --version 0.8.6"
}

function log {
  local readonly level="$1"
  local readonly message="$2"
  local readonly timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local readonly message="$1"
  log "INFO" "$message"
}

function log_warn {
  local readonly message="$1"
  log "WARN" "$message"
}

function log_error {
  local readonly message="$1"
  log "ERROR" "$message"
}

function assert_not_empty {
  local readonly arg_name="$1"
  local readonly arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

function user_exists {
  local readonly username="$1"
  id "$username" >/dev/null 2>&1
}

function create_nomad_user {
  local readonly username="$1"

  if $(user_exists "$username"); then
    echo "User $username already exists. Will not create again."
  else
    log_info "Creating user named $username"
    sudo adduser --system --group   \
      --disabled-login              \
      --no-create-home              \
      --home /nonexistent           \
      --shell /usr/sbin/nologin     \
      --gecos "Nomad by HashiCorp"  \
      $username
  fi
}

function create_nomad_install_paths {
  local readonly path="$1"
  local readonly username="$2"

  log_info "Creating install dirs for Nomad at $path"
  sudo mkdir -p "$path"
  sudo mkdir -p "$path/bin"
  sudo mkdir -p "$path/config"
  sudo mkdir -p "$path/data"

  log_info "Changing ownership of $path to $username"
  sudo chown -R "$username:$username" "$path"
}

# S3 bucket in AWS China region as a file mirror,
# which works around network connectivity issue caused by the GFW
function download {
    local readonly url="$1"
    local readonly local_path="$2"
    local readonly az=$(ec2metadata --availability-zone)
    if [[ $az != cn-* ]]; then
        curl -o "$local_path" "$url" --location --silent --fail --show-error
    else
        local readonly s3_uri="s3://dl.seasungames.com/${url#https://}"
        aws s3 cp "$s3_uri" "$local_path" --region cn-north-1
    fi
}

function install_nomad_binary {
  local readonly version="$1"
  local readonly path="$2"
  local readonly username="$3"

  local readonly tmp_dir=$(mktemp --tmpdir=/tmp --directory nomad-XXXXXXXX)
  local readonly download_path="$tmp_dir/nomad.zip"

  local readonly url="https://releases.hashicorp.com/nomad/${version}/nomad_${version}_linux_amd64.zip"
  local readonly bin_dir="$path/bin"
  local readonly nomad_dest_path="$bin_dir/nomad"
  local readonly run_nomad_dest_path="$bin_dir/run-nomad"
  local readonly meta_renderer_dest_path="$bin_dir/meta-renderer"

  log_info "Downloading Nomad $version from $url to $download_path"
  download "$url" "$download_path"
  unzip -d "$tmp_dir" "$download_path"

  log_info "Moving Nomad binary to $nomad_dest_path"
  sudo mv "$tmp_dir/nomad" "$nomad_dest_path"
  sudo chown "$username:$username" "$nomad_dest_path"
  sudo chmod a+x "$nomad_dest_path"

  local readonly symlink_path="$SYSTEM_BIN_DIR/nomad"
  if [[ -f "$symlink_path" ]]; then
    log_info "Symlink $symlink_path already exists. Will not add again."
  else
    log_info "Adding symlink to $nomad_dest_path in $symlink_path"
    sudo ln -s "$nomad_dest_path" "$symlink_path"
  fi

  log_info "Copying Nomad run script to $run_nomad_dest_path"
  sudo install -v -o "$username" -g "$username" -m 755 "$SCRIPT_DIR/run-nomad" "$run_nomad_dest_path"
  log_info "Copying meta renderer script to $meta_renderer_dest_path"
  sudo install -v -o "$username" -g "$username" -m 755 "$SCRIPT_DIR/meta-renderer" "$meta_renderer_dest_path"
}

# =============================================================================

function install {
  local version=""
  local path="$NOMAD_INSTALL_PATH"
  local user="$NOMAD_USER"

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --version)
        version="$2"
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  assert_not_empty "--version" "$version"

  log_info "Starting Nomad install"

  create_nomad_user "$user"
  create_nomad_install_paths "$path" "$user"
  install_nomad_binary "$version" "$path" "$user"

  if command -v nomad; then
    log_info "Nomad install complete!"
  else
    log_error "Could not find nomad command. Aborting."
    exit 1
  fi
}

install "$@"
